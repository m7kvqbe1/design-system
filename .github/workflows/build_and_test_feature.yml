# name: Build & Test Feature

# on:
#   push:
#     branches-ignore:
#       - latest
#       - master

# jobs:
#      Build_icon_library:
#       runs-on: ubuntu-latest
#       steps:
#         - name: Git clone repository
#           uses: actions/checkout@v2

#         - name: Cache Node modules
#           uses: actions/cache@v2
#           with:
#             path: '**/node_modules'
#             key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

#         - name: Build icon-library
#           run: |
#             yarn install
#             yarn --cwd packages/icon-library build

#         - name: Build design-tokens
#           run: yarn --cwd packages/design-tokens build

#         - name: Create tar
#           run: |
#             cp -R packages/icon-library/dist distil
#             cp -R packages/design-tokens/dist distdt
#             tar -czvf dist.tar.gz distil distdt

#         - name: Persist artifacts
#           uses: actions/upload-artifact@v2
#           with:
#             name: dist
#             path: ./dist.tar.gz


#      Security_audit:
#       runs-on: ubuntu-latest
#       steps:
#         - name: Git clone repository
#           uses: actions/checkout@v2

#         - name: Run audit
#           run: yarn audit


#      Check_commits:
#       runs-on: ubuntu-latest
#       needs: Build_icon_library
#       steps:
#         - name: Git clone repository
#           uses: actions/checkout@v2

#         - name: Cache Node modules
#           uses: actions/cache@v2
#           with:
#             path: '**/node_modules'
#             key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

#         - name: Attach workspace
#           uses: actions/download-artifact@v2
#           with:
#             name: dist

#         - name: check commits
#           run: |
#             tar -xzf dist.tar.gz && mv distil packages/icon-library/dist && mv distdt packages/design-tokens/dist
#             node ./scripts/commitlint ${{ github.event.pull_request._links.html.href }}
#             node ./scripts/check-fixup ${{ github.event.pull_request._links.html.href }}


#      Lint_css-framework:
#       runs-on: ubuntu-latest
#       steps:
#         - name: Git clone repository
#           uses: actions/checkout@v2

#         - name: Cache Node modules
#           uses: actions/cache@v2
#           with:
#             path: '**/node_modules'
#             key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

#         - name: Get dependencies & run lint
#           run: |
#             yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
#             mkdir -p packages/css-framework/test-results/stylelint
#             yarn --cwd packages/css-framework --silent stylelint --custom-formatter '../../node_modules/stylelint-junit-formatter/index.js' ./index.scss > packages/css-framework/test-results/stylelint/results.xml

#         - name: Persist artifacts
#           uses: actions/upload-artifact@v2
#           with:
#             name: stylelint
#             path: packages/css-framework/test-results/stylelint/results.xml


#      Lint_react-component-library:
#       runs-on: ubuntu-latest
#       env:
#         ESLINT_JUNIT_OUTPUT: "test-results/eslint/react-component-results.xml"
#       steps:
#         - name: Git clone repository
#           uses: actions/checkout@v2

#         - name: Cache Node modules
#           uses: actions/cache@v2
#           with:
#             path: '**/node_modules'
#             key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

#         - name: Get dependencies & run lint
#           run: |
#             echo "$ESLINT_JUNIT_OUTPUT"
#             yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
#             mkdir -p packages/react-component-library/test-results/eslint
#             yarn --cwd packages/react-component-library lint:ci

#         - name: Persist artifacts
#           uses: actions/upload-artifact@v2
#           with:
#             name: lintreact
#             path: packages/react-component-library/test-results/eslint/react-component-results.xml


#      Lint_docs-site:
#       runs-on: ubuntu-latest
#       env:
#         ESLINT_JUNIT_OUTPUT: "test-results/eslint/docs-site-results.xml"
#       steps:
#         - name: Git clone repository
#           uses: actions/checkout@v2

#         - name: Cache Node modules
#           uses: actions/cache@v2
#           with:
#             path: '**/node_modules'
#             key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

#         - name: Get dependencies & run lint
#           run: |
#             yarn install --cache-folder ~/.cache/yarn
#             yarn --cwd packages/docs-site svgr
#             mkdir -p packages/docs-site/test-results/eslint
#             yarn --cwd packages/docs-site lint:ci

#         - name: Persist artifacts
#           uses: actions/upload-artifact@v2
#           with:
#             name: lintdocs
#             path: packages/docs-site/test-results/eslint/docs-site-results.xml


#      Test_docs-site:
#       runs-on: ubuntu-latest
#       needs: [Build_icon_library, Lint_docs-site]
#       steps:
#         - name: Git clone repository
#           uses: actions/checkout@v2

#         - name: Cache Node modules
#           uses: actions/cache@v2
#           with:
#             path: '**/node_modules'
#             key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

#         - name: Attach workspace
#           uses: actions/download-artifact@v2
#           with:
#             name: dist

#         - name: Build react components
#           run: |
#             tar -xzf dist.tar.gz && mv distil packages/icon-library/dist && mv distdt packages/design-tokens/dist
#             yarn --cwd packages/react-component-library build
#         - name: Build site
#           run: yarn --cwd packages/docs-site build
#         - name: Jest
#           env:
#             JEST_JUNIT_OUTPUT_DIR: test-results/jest
#             JEST_JUNIT_OUTPUT_NAME: docs-site-results.xml
#           run: yarn --cwd packages/docs-site jest --ci --coverage --silent --no-cache --reporters=default --reporters=jest-junit --runInBand

#         - name: Upload test reports to CodeCov
#           run: bash <(curl -s https://codecov.io/bash)

#         - name: Persist artifacts
#           uses: actions/upload-artifact@v2
#           with:
#             name: docstest
#             path: packages/docs-site/test-results/jest/docs-site-results.xml


#      Test_react-component-library:
#       runs-on: ubuntu-latest
#       needs: [Build_icon_library, Lint_react-component-library]
#       steps:
#         - name: Git clone repository
#           uses: actions/checkout@v2

#         - name: Cache Node modules
#           uses: actions/cache@v2
#           with:
#             path: '**/node_modules'
#             key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

#         - name: Attach workspace
#           uses: actions/download-artifact@v2
#           with:
#             name: dist

#         - name: Jest
#           env:
#             JEST_JUNIT_OUTPUT_DIR: test-results/jest
#             JEST_JUNIT_OUTPUT_NAME: react-component-results.xml
#           run: |
#             tar -xzf dist.tar.gz && mv distil packages/icon-library/dist && mv distdt packages/design-tokens/dist
#             yarn --cwd packages/react-component-library test --ci --coverage --silent --no-cache --reporters=default --reporters=jest-junit --runInBand

#         - name: Upload test reports to CodeCov
#           run: bash <(curl -s https://codecov.io/bash)

#         - name: Persist artifacts
#           uses: actions/upload-artifact@v2
#           with:
#             name: reacttest
#             path: packages/react-component-library/test-results/jest/react-component-results.xml


#      Test_a11y:
#        runs-on: ubuntu-latest
#        needs: [Build_icon_library, Lint_react-component-library]
#        steps:
#          - name: Git clone repository
#            uses: actions/checkout@v2

#          - name: Cache Node modules
#            uses: actions/cache@v2
#            with:
#              path: '**/node_modules'
#              key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

#          - name: Attach workspace
#            uses: actions/download-artifact@v2
#            with:
#              name: dist

#          - name: Jest a11y
#            run: |
#              tar -xzf dist.tar.gz && mv distil packages/icon-library/dist && mv distdt packages/design-tokens/dist
#              yarn --cwd packages/react-component-library test:a11y


#      Test_visual_regression:
#       runs-on: ubuntu-latest
#       needs: [Build_icon_library, Test_react-component-library]
#       steps:
#         - name: Git clone repository
#           uses: actions/checkout@v2
#           with:
#             fetch-depth: 0

#         - name: Cache Node modules
#           uses: actions/cache@v2
#           with:
#             path: '**/node_modules'
#             key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

#         - name: Attach workspace
#           uses: actions/download-artifact@v2
#           with:
#             name: dist

#         - name: Run visual regression tests
#           run: |
#             tar -xzf dist.tar.gz && mv distil packages/icon-library/dist && mv distdt packages/design-tokens/dist
#             yarn --cwd packages/react-component-library chromatic --app-code=${{secrets.CHROMATIC_TOKEN}}



